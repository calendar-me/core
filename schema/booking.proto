syntax = "proto3";
package booking;
option go_package = "github.com/calendar-me/core/domain/schema";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "schema/user.proto";
import "schema/business.proto";
import "schema/common.proto";

/* models */ 

message Slot {
    string id = 1;
    business.Availability.Type type = 2;
    google.protobuf.Timestamp start = 3;

    users.User user = 4;
    business.Availability availability = 5;
}

message Ticket {
    enum Type {
        IN_LINE = 0;
        CHECKED = 1;
        CANCELED = 2;
    }

    string id = 1;
    int32 number = 2;
    Type type = 3;
    
    Slot slot = 4;
}

/* filters */ 

message SlotFilter {
    message Index {
        users.User user = 1;
        business.Availability availability = 2;
        google.protobuf.Timestamp start = 3;
    }

    optional string id = 1;
    optional Index index = 2;
    optional business.Availability.Type type = 3;
}
message SlotsFilter {
    repeated string ids = 1;
    optional users.User user = 2;
    optional business.Availability availability = 3;
    optional google.protobuf.Timestamp start = 4;
    optional business.Availability.Type type = 5;
    optional common.QueryParams params = 6;
}

message TicketFilter {
    message Index {
        users.User user = 1;
        Slot slot = 2;
    }

    optional string id = 1;
}
message TicketsFilter {
    repeated string ids = 1;
    optional users.User user = 2;
    optional business.Availability availability = 3;
    optional google.protobuf.Timestamp start = 4;  
    optional Ticket.Type type = 5;
    optional common.QueryParams params = 6;
}

/* service */ 

service BookingService {
    rpc CalendarSlots(CalendarSlotsRequest) returns (CalendarSlotsResponse);
    rpc PreviewSlots(PreviewSlotsRequest) returns (PreviewSlotsResponse);
    
    rpc Book(BookRequest) returns (BookResponse);
    rpc GetBooking(GetBookingRequest) returns (GetBookingResponse);
    rpc GetBookings(GetBookingsRequest) returns (GetBookingsResponse);
    
    rpc Confirm(ConfirmRequest) returns (ConfirmResponse);
    rpc CheckIn(CheckInRequest) returns (CheckInResponse);
    rpc Cancel(CancelRequest) returns (CancelResponse);
    rpc Shift(ShiftRequest) returns (ShiftResponse);

    rpc GetTicket(GetTicketRequest) returns (GetTicketResponse);
    rpc CheckTicket(CheckTicketRequest) returns (CheckTicketResponse);
}

message CalendarSlotsRequest {
    business.Service service = 1;
    google.protobuf.Timestamp from = 2;
    google.protobuf.Timestamp to = 3;
}
message CalendarSlotsResponse {
    repeated Slot slots = 1;
}

message PreviewSlotsRequest {
    business.Service service = 1;
    google.protobuf.Timestamp from = 2;
    google.protobuf.Timestamp to = 3;
    repeated business.Availability availabilities = 4;
}
message PreviewSlotsResponse {
    repeated Slot slots = 1;
}

message BookRequest {
    business.Service service = 1;
    google.protobuf.Timestamp from = 2;
    google.protobuf.Duration duration = 3;
}
message BookResponse {
    Slot slot = 1;
}

message GetBookingRequest {
    SlotFilter filter = 1;
}
message GetBookingResponse {
     Slot slot = 1;
}

message GetBookingsRequest {
    SlotsFilter filter = 1;
}
message GetBookingsResponse {
     repeated Slot slots = 1;
}

message ConfirmRequest {
    Slot slot = 1;
}
message ConfirmResponse {
    bool confirmed = 1;
}

message CheckInRequest {
    Slot slot = 1;
}
message CheckInResponse {
    Ticket ticket = 1;
}

message CancelRequest {
    Slot slot = 1;
}
message CancelResponse {
    bool canceled = 1;
}

message ShiftRequest {
    Slot slot = 1;
    google.protobuf.Timestamp from = 2;
}
message ShiftResponse {
    bool shifted = 1;
}

message GetTicketRequest {
    TicketFilter filter = 1;
}
message GetTicketResponse {
    Ticket ticket = 1;
}

message CheckTicketRequest {
    TicketFilter filter = 1;
}
message CheckTicketResponse {
    Ticket ticket = 1;
}

/* storage */

service BookingStorage {
    rpc CreateSlot(CreateSlotRequest) returns (CreateSlotResponse);
    rpc UpdateSlot(UpdateSlotRequest) returns (UpdateSlotResponse);
    rpc DeleteSlot(DeleteSlotRequest) returns (DeleteSlotResponse);
    rpc FindSlot(FindSlotRequest) returns (FindSlotResponse);
    rpc FindSlots(FindSlotsRequest) returns (FindSlotsResponse);

    rpc CreateTicket(CreateTicketRequest) returns (CreateTicketResponse);
    rpc UpdateTicket(UpdateTicketRequest) returns (UpdateTicketResponse);
    rpc FindTicket(FindTicketRequest) returns (FindTicketResponse);
    rpc FindTickets(FindTicketsRequest) returns (FindTicketsResponse);

    // booking streaming
}

message CreateSlotRequest{
    Slot slot = 1;
}
message CreateSlotResponse{
    Slot slot = 1;
}

message UpdateSlotRequest{
    Slot slot = 2;
}
message UpdateSlotResponse{
    bool updated = 1;
}

message DeleteSlotRequest{
    Slot slot = 1;
}
message DeleteSlotResponse{
    bool deleted = 1;
}

message FindSlotRequest{
    SlotFilter filter = 1;
}
message FindSlotResponse{
    Slot slot = 1;
}

message FindSlotsRequest{
    SlotsFilter filter = 1;
}
message FindSlotsResponse{
    repeated Slot slots = 1;
}

message CreateTicketRequest{
    Ticket ticket = 1;
}
message CreateTicketResponse{
    string ticket_id = 1;
}

message UpdateTicketRequest{
    Ticket ticket = 1;
}
message UpdateTicketResponse{
    bool updated = 1;
}

message FindTicketRequest{
    TicketFilter filter = 1;
}
message FindTicketResponse{
    Ticket ticket = 1;
}

message FindTicketsRequest{
    TicketsFilter filter = 1;
}
message FindTicketsResponse{
    repeated Ticket tickets = 1;
}
