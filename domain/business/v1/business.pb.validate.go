// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/v1/business.proto

package businessv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Availability with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Availability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Availability with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AvailabilityMultiError, or
// nil if none found.
func (m *Availability) ValidateAll() error {
	return m.validate(true)
}

func (m *Availability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Active

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Step",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Step",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "Step",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Frequency

	// no validation rules for Repeat

	// no validation rules for Slots

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilityValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AvailabilityMultiError(errors)
	}

	return nil
}

// AvailabilityMultiError is an error wrapping multiple validation errors
// returned by Availability.ValidateAll() if the designated constraints aren't met.
type AvailabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailabilityMultiError) AllErrors() []error { return m }

// AvailabilityValidationError is the validation error returned by
// Availability.Validate if the designated constraints aren't met.
type AvailabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilityValidationError) ErrorName() string { return "AvailabilityValidationError" }

// Error satisfies the builtin error interface
func (e AvailabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilityValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Active

	// no validation rules for Kind

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on Business with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Business) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Business with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessMultiError, or nil
// if none found.
func (m *Business) ValidateAll() error {
	return m.validate(true)
}

func (m *Business) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Active

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessMultiError(errors)
	}

	return nil
}

// BusinessMultiError is an error wrapping multiple validation errors returned
// by Business.ValidateAll() if the designated constraints aren't met.
type BusinessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessMultiError) AllErrors() []error { return m }

// BusinessValidationError is the validation error returned by
// Business.Validate if the designated constraints aren't met.
type BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidationError) ErrorName() string { return "BusinessValidationError" }

// Error satisfies the builtin error interface
func (e BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusiness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Element.(type) {
	case *Role_Business:
		if v == nil {
			err := RoleValidationError{
				field:  "Element",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBusiness()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "Business",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "Business",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Role_Service:
		if v == nil {
			err := RoleValidationError{
				field:  "Element",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on AvailabilityFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AvailabilityFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailabilityFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AvailabilityFilterMultiError, or nil if none found.
func (m *AvailabilityFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailabilityFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AvailabilityFilterMultiError(errors)
	}

	return nil
}

// AvailabilityFilterMultiError is an error wrapping multiple validation errors
// returned by AvailabilityFilter.ValidateAll() if the designated constraints
// aren't met.
type AvailabilityFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailabilityFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailabilityFilterMultiError) AllErrors() []error { return m }

// AvailabilityFilterValidationError is the validation error returned by
// AvailabilityFilter.Validate if the designated constraints aren't met.
type AvailabilityFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilityFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilityFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilityFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilityFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilityFilterValidationError) ErrorName() string {
	return "AvailabilityFilterValidationError"
}

// Error satisfies the builtin error interface
func (e AvailabilityFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailabilityFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilityFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilityFilterValidationError{}

// Validate checks the field values on AvailabilitiesFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AvailabilitiesFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailabilitiesFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AvailabilitiesFilterMultiError, or nil if none found.
func (m *AvailabilitiesFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailabilitiesFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilitiesFilterValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilitiesFilterValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilitiesFilterValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AvailabilitiesFilterValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AvailabilitiesFilterValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AvailabilitiesFilterValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AvailabilitiesFilterMultiError(errors)
	}

	return nil
}

// AvailabilitiesFilterMultiError is an error wrapping multiple validation
// errors returned by AvailabilitiesFilter.ValidateAll() if the designated
// constraints aren't met.
type AvailabilitiesFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailabilitiesFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailabilitiesFilterMultiError) AllErrors() []error { return m }

// AvailabilitiesFilterValidationError is the validation error returned by
// AvailabilitiesFilter.Validate if the designated constraints aren't met.
type AvailabilitiesFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilitiesFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilitiesFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilitiesFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilitiesFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilitiesFilterValidationError) ErrorName() string {
	return "AvailabilitiesFilterValidationError"
}

// Error satisfies the builtin error interface
func (e AvailabilitiesFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailabilitiesFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilitiesFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilitiesFilterValidationError{}

// Validate checks the field values on ServiceFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceFilterMultiError, or
// nil if none found.
func (m *ServiceFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ServiceFilterMultiError(errors)
	}

	return nil
}

// ServiceFilterMultiError is an error wrapping multiple validation errors
// returned by ServiceFilter.ValidateAll() if the designated constraints
// aren't met.
type ServiceFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceFilterMultiError) AllErrors() []error { return m }

// ServiceFilterValidationError is the validation error returned by
// ServiceFilter.Validate if the designated constraints aren't met.
type ServiceFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceFilterValidationError) ErrorName() string { return "ServiceFilterValidationError" }

// Error satisfies the builtin error interface
func (e ServiceFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceFilterValidationError{}

// Validate checks the field values on ServicesFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServicesFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicesFilterMultiError,
// or nil if none found.
func (m *ServicesFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesFilterValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesFilterValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesFilterValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Kind != nil {
		// no validation rules for Kind
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Params != nil {

		if all {
			switch v := interface{}(m.GetParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServicesFilterValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServicesFilterValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServicesFilterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServicesFilterMultiError(errors)
	}

	return nil
}

// ServicesFilterMultiError is an error wrapping multiple validation errors
// returned by ServicesFilter.ValidateAll() if the designated constraints
// aren't met.
type ServicesFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesFilterMultiError) AllErrors() []error { return m }

// ServicesFilterValidationError is the validation error returned by
// ServicesFilter.Validate if the designated constraints aren't met.
type ServicesFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesFilterValidationError) ErrorName() string { return "ServicesFilterValidationError" }

// Error satisfies the builtin error interface
func (e ServicesFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesFilterValidationError{}

// Validate checks the field values on BusinessFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessFilterMultiError,
// or nil if none found.
func (m *BusinessFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BusinessFilterMultiError(errors)
	}

	return nil
}

// BusinessFilterMultiError is an error wrapping multiple validation errors
// returned by BusinessFilter.ValidateAll() if the designated constraints
// aren't met.
type BusinessFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessFilterMultiError) AllErrors() []error { return m }

// BusinessFilterValidationError is the validation error returned by
// BusinessFilter.Validate if the designated constraints aren't met.
type BusinessFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessFilterValidationError) ErrorName() string { return "BusinessFilterValidationError" }

// Error satisfies the builtin error interface
func (e BusinessFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessFilterValidationError{}

// Validate checks the field values on BusinessesFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BusinessesFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessesFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessesFilterMultiError, or nil if none found.
func (m *BusinessesFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessesFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Kind != nil {
		// no validation rules for Kind
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Params != nil {

		if all {
			switch v := interface{}(m.GetParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessesFilterValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessesFilterValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessesFilterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessesFilterMultiError(errors)
	}

	return nil
}

// BusinessesFilterMultiError is an error wrapping multiple validation errors
// returned by BusinessesFilter.ValidateAll() if the designated constraints
// aren't met.
type BusinessesFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessesFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessesFilterMultiError) AllErrors() []error { return m }

// BusinessesFilterValidationError is the validation error returned by
// BusinessesFilter.Validate if the designated constraints aren't met.
type BusinessesFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessesFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessesFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessesFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessesFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessesFilterValidationError) ErrorName() string { return "BusinessesFilterValidationError" }

// Error satisfies the builtin error interface
func (e BusinessesFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessesFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessesFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessesFilterValidationError{}

// Validate checks the field values on RoleFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleFilterMultiError, or
// nil if none found.
func (m *RoleFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleFilterValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleFilterValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleFilterValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleFilterMultiError(errors)
	}

	return nil
}

// RoleFilterMultiError is an error wrapping multiple validation errors
// returned by RoleFilter.ValidateAll() if the designated constraints aren't met.
type RoleFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleFilterMultiError) AllErrors() []error { return m }

// RoleFilterValidationError is the validation error returned by
// RoleFilter.Validate if the designated constraints aren't met.
type RoleFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleFilterValidationError) ErrorName() string { return "RoleFilterValidationError" }

// Error satisfies the builtin error interface
func (e RoleFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleFilterValidationError{}

// Validate checks the field values on RolesFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolesFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolesFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolesFilterMultiError, or
// nil if none found.
func (m *RolesFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *RolesFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Business != nil {

		if all {
			switch v := interface{}(m.GetBusiness()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "Business",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "Business",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RolesFilterValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Service != nil {

		if all {
			switch v := interface{}(m.GetService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RolesFilterValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.User != nil {

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RolesFilterValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Params != nil {

		if all {
			switch v := interface{}(m.GetParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RolesFilterValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RolesFilterValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RolesFilterMultiError(errors)
	}

	return nil
}

// RolesFilterMultiError is an error wrapping multiple validation errors
// returned by RolesFilter.ValidateAll() if the designated constraints aren't met.
type RolesFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolesFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolesFilterMultiError) AllErrors() []error { return m }

// RolesFilterValidationError is the validation error returned by
// RolesFilter.Validate if the designated constraints aren't met.
type RolesFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolesFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolesFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolesFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolesFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolesFilterValidationError) ErrorName() string { return "RolesFilterValidationError" }

// Error satisfies the builtin error interface
func (e RolesFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolesFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolesFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolesFilterValidationError{}

// Validate checks the field values on RegisterBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterBusinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterBusinessRequestMultiError, or nil if none found.
func (m *RegisterBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterBusinessRequestValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterBusinessRequestMultiError(errors)
	}

	return nil
}

// RegisterBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterBusinessRequestMultiError) AllErrors() []error { return m }

// RegisterBusinessRequestValidationError is the validation error returned by
// RegisterBusinessRequest.Validate if the designated constraints aren't met.
type RegisterBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterBusinessRequestValidationError) ErrorName() string {
	return "RegisterBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterBusinessRequestValidationError{}

// Validate checks the field values on RegisterBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterBusinessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterBusinessResponseMultiError, or nil if none found.
func (m *RegisterBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return RegisterBusinessResponseMultiError(errors)
	}

	return nil
}

// RegisterBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterBusinessResponseMultiError) AllErrors() []error { return m }

// RegisterBusinessResponseValidationError is the validation error returned by
// RegisterBusinessResponse.Validate if the designated constraints aren't met.
type RegisterBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterBusinessResponseValidationError) ErrorName() string {
	return "RegisterBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterBusinessResponseValidationError{}

// Validate checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessRequestMultiError, or nil if none found.
func (m *GetBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessRequestMultiError(errors)
	}

	return nil
}

// GetBusinessRequestMultiError is an error wrapping multiple validation errors
// returned by GetBusinessRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessRequestMultiError) AllErrors() []error { return m }

// GetBusinessRequestValidationError is the validation error returned by
// GetBusinessRequest.Validate if the designated constraints aren't met.
type GetBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessRequestValidationError) ErrorName() string {
	return "GetBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessRequestValidationError{}

// Validate checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessResponseMultiError, or nil if none found.
func (m *GetBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessResponseValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessResponseMultiError(errors)
	}

	return nil
}

// GetBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessResponseMultiError) AllErrors() []error { return m }

// GetBusinessResponseValidationError is the validation error returned by
// GetBusinessResponse.Validate if the designated constraints aren't met.
type GetBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessResponseValidationError) ErrorName() string {
	return "GetBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessResponseValidationError{}

// Validate checks the field values on GetBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessesRequestMultiError, or nil if none found.
func (m *GetBusinessesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessesRequestMultiError(errors)
	}

	return nil
}

// GetBusinessesRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessesRequestMultiError) AllErrors() []error { return m }

// GetBusinessesRequestValidationError is the validation error returned by
// GetBusinessesRequest.Validate if the designated constraints aren't met.
type GetBusinessesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessesRequestValidationError) ErrorName() string {
	return "GetBusinessesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessesRequestValidationError{}

// Validate checks the field values on GetBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessesResponseMultiError, or nil if none found.
func (m *GetBusinessesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBusinesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBusinessesResponseValidationError{
						field:  fmt.Sprintf("Businesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBusinessesResponseValidationError{
						field:  fmt.Sprintf("Businesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBusinessesResponseValidationError{
					field:  fmt.Sprintf("Businesses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBusinessesResponseMultiError(errors)
	}

	return nil
}

// GetBusinessesResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessesResponseMultiError) AllErrors() []error { return m }

// GetBusinessesResponseValidationError is the validation error returned by
// GetBusinessesResponse.Validate if the designated constraints aren't met.
type GetBusinessesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessesResponseValidationError) ErrorName() string {
	return "GetBusinessesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessesResponseValidationError{}

// Validate checks the field values on RegisterServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterServiceRequestMultiError, or nil if none found.
func (m *RegisterServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterServiceRequestValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterServiceRequestMultiError(errors)
	}

	return nil
}

// RegisterServiceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceRequestMultiError) AllErrors() []error { return m }

// RegisterServiceRequestValidationError is the validation error returned by
// RegisterServiceRequest.Validate if the designated constraints aren't met.
type RegisterServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceRequestValidationError) ErrorName() string {
	return "RegisterServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceRequestValidationError{}

// Validate checks the field values on RegisterServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterServiceResponseMultiError, or nil if none found.
func (m *RegisterServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return RegisterServiceResponseMultiError(errors)
	}

	return nil
}

// RegisterServiceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceResponseMultiError) AllErrors() []error { return m }

// RegisterServiceResponseValidationError is the validation error returned by
// RegisterServiceResponse.Validate if the designated constraints aren't met.
type RegisterServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceResponseValidationError) ErrorName() string {
	return "RegisterServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceResponseValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceResponseMultiError, or nil if none found.
func (m *GetServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceResponseMultiError(errors)
	}

	return nil
}

// GetServiceResponseMultiError is an error wrapping multiple validation errors
// returned by GetServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceResponseMultiError) AllErrors() []error { return m }

// GetServiceResponseValidationError is the validation error returned by
// GetServiceResponse.Validate if the designated constraints aren't met.
type GetServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceResponseValidationError) ErrorName() string {
	return "GetServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceResponseValidationError{}

// Validate checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesRequestMultiError, or nil if none found.
func (m *GetServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServicesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServicesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServicesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServicesRequestMultiError(errors)
	}

	return nil
}

// GetServicesRequestMultiError is an error wrapping multiple validation errors
// returned by GetServicesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesRequestMultiError) AllErrors() []error { return m }

// GetServicesRequestValidationError is the validation error returned by
// GetServicesRequest.Validate if the designated constraints aren't met.
type GetServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesRequestValidationError) ErrorName() string {
	return "GetServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesRequestValidationError{}

// Validate checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesResponseMultiError, or nil if none found.
func (m *GetServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServicesResponseMultiError(errors)
	}

	return nil
}

// GetServicesResponseMultiError is an error wrapping multiple validation
// errors returned by GetServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesResponseMultiError) AllErrors() []error { return m }

// GetServicesResponseValidationError is the validation error returned by
// GetServicesResponse.Validate if the designated constraints aren't met.
type GetServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesResponseValidationError) ErrorName() string {
	return "GetServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesResponseValidationError{}

// Validate checks the field values on AddAvailabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAvailabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAvailabilitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAvailabilitiesRequestMultiError, or nil if none found.
func (m *AddAvailabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAvailabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAvailabilitiesRequestValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAvailabilitiesRequestValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAvailabilitiesRequestValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddAvailabilitiesRequestMultiError(errors)
	}

	return nil
}

// AddAvailabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by AddAvailabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAvailabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAvailabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAvailabilitiesRequestMultiError) AllErrors() []error { return m }

// AddAvailabilitiesRequestValidationError is the validation error returned by
// AddAvailabilitiesRequest.Validate if the designated constraints aren't met.
type AddAvailabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAvailabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAvailabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAvailabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAvailabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAvailabilitiesRequestValidationError) ErrorName() string {
	return "AddAvailabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAvailabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAvailabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAvailabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAvailabilitiesRequestValidationError{}

// Validate checks the field values on AddAvailabilitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAvailabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAvailabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAvailabilitiesResponseMultiError, or nil if none found.
func (m *AddAvailabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAvailabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAvailabilitiesResponseMultiError(errors)
	}

	return nil
}

// AddAvailabilitiesResponseMultiError is an error wrapping multiple validation
// errors returned by AddAvailabilitiesResponse.ValidateAll() if the
// designated constraints aren't met.
type AddAvailabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAvailabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAvailabilitiesResponseMultiError) AllErrors() []error { return m }

// AddAvailabilitiesResponseValidationError is the validation error returned by
// AddAvailabilitiesResponse.Validate if the designated constraints aren't met.
type AddAvailabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAvailabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAvailabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAvailabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAvailabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAvailabilitiesResponseValidationError) ErrorName() string {
	return "AddAvailabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAvailabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAvailabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAvailabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAvailabilitiesResponseValidationError{}

// Validate checks the field values on GetAvailabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailabilitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailabilitiesRequestMultiError, or nil if none found.
func (m *GetAvailabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAvailabilitiesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAvailabilitiesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAvailabilitiesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAvailabilitiesRequestMultiError(errors)
	}

	return nil
}

// GetAvailabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAvailabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAvailabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailabilitiesRequestMultiError) AllErrors() []error { return m }

// GetAvailabilitiesRequestValidationError is the validation error returned by
// GetAvailabilitiesRequest.Validate if the designated constraints aren't met.
type GetAvailabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailabilitiesRequestValidationError) ErrorName() string {
	return "GetAvailabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailabilitiesRequestValidationError{}

// Validate checks the field values on GetAvailabilitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailabilitiesResponseMultiError, or nil if none found.
func (m *GetAvailabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvailabilitiesResponseValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvailabilitiesResponseValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvailabilitiesResponseValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAvailabilitiesResponseMultiError(errors)
	}

	return nil
}

// GetAvailabilitiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAvailabilitiesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAvailabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailabilitiesResponseMultiError) AllErrors() []error { return m }

// GetAvailabilitiesResponseValidationError is the validation error returned by
// GetAvailabilitiesResponse.Validate if the designated constraints aren't met.
type GetAvailabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailabilitiesResponseValidationError) ErrorName() string {
	return "GetAvailabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailabilitiesResponseValidationError{}

// Validate checks the field values on GrantRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrantRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantRolesRequestMultiError, or nil if none found.
func (m *GrantRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantRolesRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantRolesRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantRolesRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantRolesRequestMultiError(errors)
	}

	return nil
}

// GrantRolesRequestMultiError is an error wrapping multiple validation errors
// returned by GrantRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type GrantRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantRolesRequestMultiError) AllErrors() []error { return m }

// GrantRolesRequestValidationError is the validation error returned by
// GrantRolesRequest.Validate if the designated constraints aren't met.
type GrantRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantRolesRequestValidationError) ErrorName() string {
	return "GrantRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantRolesRequestValidationError{}

// Validate checks the field values on GrantRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantRolesResponseMultiError, or nil if none found.
func (m *GrantRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Granted

	if len(errors) > 0 {
		return GrantRolesResponseMultiError(errors)
	}

	return nil
}

// GrantRolesResponseMultiError is an error wrapping multiple validation errors
// returned by GrantRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type GrantRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantRolesResponseMultiError) AllErrors() []error { return m }

// GrantRolesResponseValidationError is the validation error returned by
// GrantRolesResponse.Validate if the designated constraints aren't met.
type GrantRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantRolesResponseValidationError) ErrorName() string {
	return "GrantRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantRolesResponseValidationError{}

// Validate checks the field values on RevokeRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeRolesRequestMultiError, or nil if none found.
func (m *RevokeRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevokeRolesRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevokeRolesRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevokeRolesRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RevokeRolesRequestMultiError(errors)
	}

	return nil
}

// RevokeRolesRequestMultiError is an error wrapping multiple validation errors
// returned by RevokeRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type RevokeRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRolesRequestMultiError) AllErrors() []error { return m }

// RevokeRolesRequestValidationError is the validation error returned by
// RevokeRolesRequest.Validate if the designated constraints aren't met.
type RevokeRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRolesRequestValidationError) ErrorName() string {
	return "RevokeRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRolesRequestValidationError{}

// Validate checks the field values on RevokeRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeRolesResponseMultiError, or nil if none found.
func (m *RevokeRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Revoked

	if len(errors) > 0 {
		return RevokeRolesResponseMultiError(errors)
	}

	return nil
}

// RevokeRolesResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokeRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRolesResponseMultiError) AllErrors() []error { return m }

// RevokeRolesResponseValidationError is the validation error returned by
// RevokeRolesResponse.Validate if the designated constraints aren't met.
type RevokeRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRolesResponseValidationError) ErrorName() string {
	return "RevokeRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRolesResponseValidationError{}

// Validate checks the field values on GetRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesRequestMultiError, or nil if none found.
func (m *GetRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRolesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRolesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRolesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRolesRequestMultiError(errors)
	}

	return nil
}

// GetRolesRequestMultiError is an error wrapping multiple validation errors
// returned by GetRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesRequestMultiError) AllErrors() []error { return m }

// GetRolesRequestValidationError is the validation error returned by
// GetRolesRequest.Validate if the designated constraints aren't met.
type GetRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesRequestValidationError) ErrorName() string { return "GetRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesRequestValidationError{}

// Validate checks the field values on GetRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesResponseMultiError, or nil if none found.
func (m *GetRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRolesResponseMultiError(errors)
	}

	return nil
}

// GetRolesResponseMultiError is an error wrapping multiple validation errors
// returned by GetRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesResponseMultiError) AllErrors() []error { return m }

// GetRolesResponseValidationError is the validation error returned by
// GetRolesResponse.Validate if the designated constraints aren't met.
type GetRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesResponseValidationError) ErrorName() string { return "GetRolesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesResponseValidationError{}

// Validate checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessRequestMultiError, or nil if none found.
func (m *CreateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessRequestValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessRequestMultiError) AllErrors() []error { return m }

// CreateBusinessRequestValidationError is the validation error returned by
// CreateBusinessRequest.Validate if the designated constraints aren't met.
type CreateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessRequestValidationError) ErrorName() string {
	return "CreateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessRequestValidationError{}

// Validate checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessResponseMultiError, or nil if none found.
func (m *CreateBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return CreateBusinessResponseMultiError(errors)
	}

	return nil
}

// CreateBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessResponseMultiError) AllErrors() []error { return m }

// CreateBusinessResponseValidationError is the validation error returned by
// CreateBusinessResponse.Validate if the designated constraints aren't met.
type CreateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessResponseValidationError) ErrorName() string {
	return "CreateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessResponseValidationError{}

// Validate checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessRequestMultiError, or nil if none found.
func (m *UpdateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessRequestValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessRequestValidationError is the validation error returned by
// UpdateBusinessRequest.Validate if the designated constraints aren't met.
type UpdateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessRequestValidationError) ErrorName() string {
	return "UpdateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessRequestValidationError{}

// Validate checks the field values on UpdateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessResponseMultiError, or nil if none found.
func (m *UpdateBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Updated

	if len(errors) > 0 {
		return UpdateBusinessResponseMultiError(errors)
	}

	return nil
}

// UpdateBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessResponseMultiError) AllErrors() []error { return m }

// UpdateBusinessResponseValidationError is the validation error returned by
// UpdateBusinessResponse.Validate if the designated constraints aren't met.
type UpdateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessResponseValidationError) ErrorName() string {
	return "UpdateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessResponseValidationError{}

// Validate checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessRequestMultiError, or nil if none found.
func (m *DeleteBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return DeleteBusinessRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessRequestValidationError is the validation error returned by
// DeleteBusinessRequest.Validate if the designated constraints aren't met.
type DeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessRequestValidationError) ErrorName() string {
	return "DeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessRequestValidationError{}

// Validate checks the field values on DeleteBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessResponseMultiError, or nil if none found.
func (m *DeleteBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deleted

	if len(errors) > 0 {
		return DeleteBusinessResponseMultiError(errors)
	}

	return nil
}

// DeleteBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessResponseMultiError) AllErrors() []error { return m }

// DeleteBusinessResponseValidationError is the validation error returned by
// DeleteBusinessResponse.Validate if the designated constraints aren't met.
type DeleteBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessResponseValidationError) ErrorName() string {
	return "DeleteBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessResponseValidationError{}

// Validate checks the field values on FindBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindBusinessRequestMultiError, or nil if none found.
func (m *FindBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindBusinessRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindBusinessRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindBusinessRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindBusinessRequestMultiError(errors)
	}

	return nil
}

// FindBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by FindBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type FindBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindBusinessRequestMultiError) AllErrors() []error { return m }

// FindBusinessRequestValidationError is the validation error returned by
// FindBusinessRequest.Validate if the designated constraints aren't met.
type FindBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindBusinessRequestValidationError) ErrorName() string {
	return "FindBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindBusinessRequestValidationError{}

// Validate checks the field values on FindBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindBusinessResponseMultiError, or nil if none found.
func (m *FindBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindBusinessResponseValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindBusinessResponseMultiError(errors)
	}

	return nil
}

// FindBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by FindBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type FindBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindBusinessResponseMultiError) AllErrors() []error { return m }

// FindBusinessResponseValidationError is the validation error returned by
// FindBusinessResponse.Validate if the designated constraints aren't met.
type FindBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindBusinessResponseValidationError) ErrorName() string {
	return "FindBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindBusinessResponseValidationError{}

// Validate checks the field values on FindBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindBusinessesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindBusinessesRequestMultiError, or nil if none found.
func (m *FindBusinessesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindBusinessesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindBusinessesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindBusinessesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindBusinessesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindBusinessesRequestMultiError(errors)
	}

	return nil
}

// FindBusinessesRequestMultiError is an error wrapping multiple validation
// errors returned by FindBusinessesRequest.ValidateAll() if the designated
// constraints aren't met.
type FindBusinessesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindBusinessesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindBusinessesRequestMultiError) AllErrors() []error { return m }

// FindBusinessesRequestValidationError is the validation error returned by
// FindBusinessesRequest.Validate if the designated constraints aren't met.
type FindBusinessesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindBusinessesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindBusinessesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindBusinessesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindBusinessesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindBusinessesRequestValidationError) ErrorName() string {
	return "FindBusinessesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindBusinessesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindBusinessesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindBusinessesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindBusinessesRequestValidationError{}

// Validate checks the field values on FindBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindBusinessesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindBusinessesResponseMultiError, or nil if none found.
func (m *FindBusinessesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindBusinessesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBusinesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindBusinessesResponseValidationError{
						field:  fmt.Sprintf("Businesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindBusinessesResponseValidationError{
						field:  fmt.Sprintf("Businesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindBusinessesResponseValidationError{
					field:  fmt.Sprintf("Businesses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindBusinessesResponseMultiError(errors)
	}

	return nil
}

// FindBusinessesResponseMultiError is an error wrapping multiple validation
// errors returned by FindBusinessesResponse.ValidateAll() if the designated
// constraints aren't met.
type FindBusinessesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindBusinessesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindBusinessesResponseMultiError) AllErrors() []error { return m }

// FindBusinessesResponseValidationError is the validation error returned by
// FindBusinessesResponse.Validate if the designated constraints aren't met.
type FindBusinessesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindBusinessesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindBusinessesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindBusinessesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindBusinessesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindBusinessesResponseValidationError) ErrorName() string {
	return "FindBusinessesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindBusinessesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindBusinessesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindBusinessesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindBusinessesResponseValidationError{}

// Validate checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceRequestMultiError, or nil if none found.
func (m *CreateServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceRequestValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceRequestMultiError(errors)
	}

	return nil
}

// CreateServiceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceRequestMultiError) AllErrors() []error { return m }

// CreateServiceRequestValidationError is the validation error returned by
// CreateServiceRequest.Validate if the designated constraints aren't met.
type CreateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRequestValidationError) ErrorName() string {
	return "CreateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRequestValidationError{}

// Validate checks the field values on CreateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceResponseMultiError, or nil if none found.
func (m *CreateServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return CreateServiceResponseMultiError(errors)
	}

	return nil
}

// CreateServiceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceResponseMultiError) AllErrors() []error { return m }

// CreateServiceResponseValidationError is the validation error returned by
// CreateServiceResponse.Validate if the designated constraints aren't met.
type CreateServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceResponseValidationError) ErrorName() string {
	return "CreateServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceResponseValidationError{}

// Validate checks the field values on UpdateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceRequestMultiError, or nil if none found.
func (m *UpdateServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceRequestValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServiceRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceRequestMultiError) AllErrors() []error { return m }

// UpdateServiceRequestValidationError is the validation error returned by
// UpdateServiceRequest.Validate if the designated constraints aren't met.
type UpdateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceRequestValidationError) ErrorName() string {
	return "UpdateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceRequestValidationError{}

// Validate checks the field values on UpdateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceResponseMultiError, or nil if none found.
func (m *UpdateServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Updated

	if len(errors) > 0 {
		return UpdateServiceResponseMultiError(errors)
	}

	return nil
}

// UpdateServiceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceResponseMultiError) AllErrors() []error { return m }

// UpdateServiceResponseValidationError is the validation error returned by
// UpdateServiceResponse.Validate if the designated constraints aren't met.
type UpdateServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceResponseValidationError) ErrorName() string {
	return "UpdateServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceRequestMultiError, or nil if none found.
func (m *DeleteServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return DeleteServiceRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceRequestMultiError) AllErrors() []error { return m }

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on DeleteServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceResponseMultiError, or nil if none found.
func (m *DeleteServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deleted

	if len(errors) > 0 {
		return DeleteServiceResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceResponseMultiError) AllErrors() []error { return m }

// DeleteServiceResponseValidationError is the validation error returned by
// DeleteServiceResponse.Validate if the designated constraints aren't met.
type DeleteServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceResponseValidationError) ErrorName() string {
	return "DeleteServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceResponseValidationError{}

// Validate checks the field values on FindServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindServiceRequestMultiError, or nil if none found.
func (m *FindServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindServiceRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindServiceRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindServiceRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindServiceRequestMultiError(errors)
	}

	return nil
}

// FindServiceRequestMultiError is an error wrapping multiple validation errors
// returned by FindServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type FindServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindServiceRequestMultiError) AllErrors() []error { return m }

// FindServiceRequestValidationError is the validation error returned by
// FindServiceRequest.Validate if the designated constraints aren't met.
type FindServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindServiceRequestValidationError) ErrorName() string {
	return "FindServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindServiceRequestValidationError{}

// Validate checks the field values on FindServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindServiceResponseMultiError, or nil if none found.
func (m *FindServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindServiceResponseMultiError(errors)
	}

	return nil
}

// FindServiceResponseMultiError is an error wrapping multiple validation
// errors returned by FindServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type FindServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindServiceResponseMultiError) AllErrors() []error { return m }

// FindServiceResponseValidationError is the validation error returned by
// FindServiceResponse.Validate if the designated constraints aren't met.
type FindServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindServiceResponseValidationError) ErrorName() string {
	return "FindServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindServiceResponseValidationError{}

// Validate checks the field values on FindServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindServicesRequestMultiError, or nil if none found.
func (m *FindServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindServicesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindServicesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindServicesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindServicesRequestMultiError(errors)
	}

	return nil
}

// FindServicesRequestMultiError is an error wrapping multiple validation
// errors returned by FindServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type FindServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindServicesRequestMultiError) AllErrors() []error { return m }

// FindServicesRequestValidationError is the validation error returned by
// FindServicesRequest.Validate if the designated constraints aren't met.
type FindServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindServicesRequestValidationError) ErrorName() string {
	return "FindServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindServicesRequestValidationError{}

// Validate checks the field values on FindServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindServicesResponseMultiError, or nil if none found.
func (m *FindServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindServicesResponseMultiError(errors)
	}

	return nil
}

// FindServicesResponseMultiError is an error wrapping multiple validation
// errors returned by FindServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type FindServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindServicesResponseMultiError) AllErrors() []error { return m }

// FindServicesResponseValidationError is the validation error returned by
// FindServicesResponse.Validate if the designated constraints aren't met.
type FindServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindServicesResponseValidationError) ErrorName() string {
	return "FindServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindServicesResponseValidationError{}

// Validate checks the field values on CreateAvailabilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAvailabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAvailabilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAvailabilityRequestMultiError, or nil if none found.
func (m *CreateAvailabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAvailabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailability()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAvailabilityRequestValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAvailabilityRequestValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailability()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAvailabilityRequestValidationError{
				field:  "Availability",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAvailabilityRequestMultiError(errors)
	}

	return nil
}

// CreateAvailabilityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAvailabilityRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateAvailabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAvailabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAvailabilityRequestMultiError) AllErrors() []error { return m }

// CreateAvailabilityRequestValidationError is the validation error returned by
// CreateAvailabilityRequest.Validate if the designated constraints aren't met.
type CreateAvailabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAvailabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAvailabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAvailabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAvailabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAvailabilityRequestValidationError) ErrorName() string {
	return "CreateAvailabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAvailabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAvailabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAvailabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAvailabilityRequestValidationError{}

// Validate checks the field values on CreateAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAvailabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAvailabilityResponseMultiError, or nil if none found.
func (m *CreateAvailabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAvailabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityId

	if len(errors) > 0 {
		return CreateAvailabilityResponseMultiError(errors)
	}

	return nil
}

// CreateAvailabilityResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAvailabilityResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAvailabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAvailabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAvailabilityResponseMultiError) AllErrors() []error { return m }

// CreateAvailabilityResponseValidationError is the validation error returned
// by CreateAvailabilityResponse.Validate if the designated constraints aren't met.
type CreateAvailabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAvailabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAvailabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAvailabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAvailabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAvailabilityResponseValidationError) ErrorName() string {
	return "CreateAvailabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAvailabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAvailabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAvailabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAvailabilityResponseValidationError{}

// Validate checks the field values on UpdateAvailabilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAvailabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAvailabilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAvailabilityRequestMultiError, or nil if none found.
func (m *UpdateAvailabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAvailabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailability()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAvailabilityRequestValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAvailabilityRequestValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailability()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAvailabilityRequestValidationError{
				field:  "Availability",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAvailabilityRequestMultiError(errors)
	}

	return nil
}

// UpdateAvailabilityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAvailabilityRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateAvailabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAvailabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAvailabilityRequestMultiError) AllErrors() []error { return m }

// UpdateAvailabilityRequestValidationError is the validation error returned by
// UpdateAvailabilityRequest.Validate if the designated constraints aren't met.
type UpdateAvailabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAvailabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAvailabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAvailabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAvailabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAvailabilityRequestValidationError) ErrorName() string {
	return "UpdateAvailabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAvailabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAvailabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAvailabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAvailabilityRequestValidationError{}

// Validate checks the field values on UpdateAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAvailabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAvailabilityResponseMultiError, or nil if none found.
func (m *UpdateAvailabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAvailabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Update

	if len(errors) > 0 {
		return UpdateAvailabilityResponseMultiError(errors)
	}

	return nil
}

// UpdateAvailabilityResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAvailabilityResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAvailabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAvailabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAvailabilityResponseMultiError) AllErrors() []error { return m }

// UpdateAvailabilityResponseValidationError is the validation error returned
// by UpdateAvailabilityResponse.Validate if the designated constraints aren't met.
type UpdateAvailabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAvailabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAvailabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAvailabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAvailabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAvailabilityResponseValidationError) ErrorName() string {
	return "UpdateAvailabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAvailabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAvailabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAvailabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAvailabilityResponseValidationError{}

// Validate checks the field values on DeleteAvailabilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAvailabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAvailabilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAvailabilityRequestMultiError, or nil if none found.
func (m *DeleteAvailabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAvailabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailabilityId

	if len(errors) > 0 {
		return DeleteAvailabilityRequestMultiError(errors)
	}

	return nil
}

// DeleteAvailabilityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAvailabilityRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAvailabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAvailabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAvailabilityRequestMultiError) AllErrors() []error { return m }

// DeleteAvailabilityRequestValidationError is the validation error returned by
// DeleteAvailabilityRequest.Validate if the designated constraints aren't met.
type DeleteAvailabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAvailabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAvailabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAvailabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAvailabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAvailabilityRequestValidationError) ErrorName() string {
	return "DeleteAvailabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAvailabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAvailabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAvailabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAvailabilityRequestValidationError{}

// Validate checks the field values on DeleteAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAvailabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAvailabilityResponseMultiError, or nil if none found.
func (m *DeleteAvailabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAvailabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deleted

	if len(errors) > 0 {
		return DeleteAvailabilityResponseMultiError(errors)
	}

	return nil
}

// DeleteAvailabilityResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAvailabilityResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAvailabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAvailabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAvailabilityResponseMultiError) AllErrors() []error { return m }

// DeleteAvailabilityResponseValidationError is the validation error returned
// by DeleteAvailabilityResponse.Validate if the designated constraints aren't met.
type DeleteAvailabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAvailabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAvailabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAvailabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAvailabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAvailabilityResponseValidationError) ErrorName() string {
	return "DeleteAvailabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAvailabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAvailabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAvailabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAvailabilityResponseValidationError{}

// Validate checks the field values on FindAvailabilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAvailabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAvailabilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAvailabilityRequestMultiError, or nil if none found.
func (m *FindAvailabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAvailabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAvailabilityRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAvailabilityRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAvailabilityRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindAvailabilityRequestMultiError(errors)
	}

	return nil
}

// FindAvailabilityRequestMultiError is an error wrapping multiple validation
// errors returned by FindAvailabilityRequest.ValidateAll() if the designated
// constraints aren't met.
type FindAvailabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAvailabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAvailabilityRequestMultiError) AllErrors() []error { return m }

// FindAvailabilityRequestValidationError is the validation error returned by
// FindAvailabilityRequest.Validate if the designated constraints aren't met.
type FindAvailabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAvailabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAvailabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAvailabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAvailabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAvailabilityRequestValidationError) ErrorName() string {
	return "FindAvailabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindAvailabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAvailabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAvailabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAvailabilityRequestValidationError{}

// Validate checks the field values on FindAvailabilityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAvailabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAvailabilityResponseMultiError, or nil if none found.
func (m *FindAvailabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAvailabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailability()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAvailabilityResponseValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAvailabilityResponseValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailability()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAvailabilityResponseValidationError{
				field:  "Availability",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindAvailabilityResponseMultiError(errors)
	}

	return nil
}

// FindAvailabilityResponseMultiError is an error wrapping multiple validation
// errors returned by FindAvailabilityResponse.ValidateAll() if the designated
// constraints aren't met.
type FindAvailabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAvailabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAvailabilityResponseMultiError) AllErrors() []error { return m }

// FindAvailabilityResponseValidationError is the validation error returned by
// FindAvailabilityResponse.Validate if the designated constraints aren't met.
type FindAvailabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAvailabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAvailabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAvailabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAvailabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAvailabilityResponseValidationError) ErrorName() string {
	return "FindAvailabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindAvailabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAvailabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAvailabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAvailabilityResponseValidationError{}

// Validate checks the field values on FindAvailabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAvailabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAvailabilitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAvailabilitiesRequestMultiError, or nil if none found.
func (m *FindAvailabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAvailabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAvailabilitiesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAvailabilitiesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAvailabilitiesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindAvailabilitiesRequestMultiError(errors)
	}

	return nil
}

// FindAvailabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by FindAvailabilitiesRequest.ValidateAll() if the
// designated constraints aren't met.
type FindAvailabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAvailabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAvailabilitiesRequestMultiError) AllErrors() []error { return m }

// FindAvailabilitiesRequestValidationError is the validation error returned by
// FindAvailabilitiesRequest.Validate if the designated constraints aren't met.
type FindAvailabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAvailabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAvailabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAvailabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAvailabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAvailabilitiesRequestValidationError) ErrorName() string {
	return "FindAvailabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindAvailabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAvailabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAvailabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAvailabilitiesRequestValidationError{}

// Validate checks the field values on FindAvailabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAvailabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAvailabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAvailabilitiesResponseMultiError, or nil if none found.
func (m *FindAvailabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAvailabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindAvailabilitiesResponseValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindAvailabilitiesResponseValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindAvailabilitiesResponseValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindAvailabilitiesResponseMultiError(errors)
	}

	return nil
}

// FindAvailabilitiesResponseMultiError is an error wrapping multiple
// validation errors returned by FindAvailabilitiesResponse.ValidateAll() if
// the designated constraints aren't met.
type FindAvailabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAvailabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAvailabilitiesResponseMultiError) AllErrors() []error { return m }

// FindAvailabilitiesResponseValidationError is the validation error returned
// by FindAvailabilitiesResponse.Validate if the designated constraints aren't met.
type FindAvailabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAvailabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAvailabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAvailabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAvailabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAvailabilitiesResponseValidationError) ErrorName() string {
	return "FindAvailabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindAvailabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAvailabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAvailabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAvailabilitiesResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Created

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deleted

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on FindRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoleRequestMultiError, or nil if none found.
func (m *FindRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRoleRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRoleRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRoleRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRoleRequestMultiError(errors)
	}

	return nil
}

// FindRoleRequestMultiError is an error wrapping multiple validation errors
// returned by FindRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type FindRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoleRequestMultiError) AllErrors() []error { return m }

// FindRoleRequestValidationError is the validation error returned by
// FindRoleRequest.Validate if the designated constraints aren't met.
type FindRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoleRequestValidationError) ErrorName() string { return "FindRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoleRequestValidationError{}

// Validate checks the field values on FindRoleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoleResponseMultiError, or nil if none found.
func (m *FindRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRoleResponseMultiError(errors)
	}

	return nil
}

// FindRoleResponseMultiError is an error wrapping multiple validation errors
// returned by FindRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type FindRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoleResponseMultiError) AllErrors() []error { return m }

// FindRoleResponseValidationError is the validation error returned by
// FindRoleResponse.Validate if the designated constraints aren't met.
type FindRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoleResponseValidationError) ErrorName() string { return "FindRoleResponseValidationError" }

// Error satisfies the builtin error interface
func (e FindRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoleResponseValidationError{}

// Validate checks the field values on FindRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRolesRequestMultiError, or nil if none found.
func (m *FindRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRolesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRolesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRolesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRolesRequestMultiError(errors)
	}

	return nil
}

// FindRolesRequestMultiError is an error wrapping multiple validation errors
// returned by FindRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type FindRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRolesRequestMultiError) AllErrors() []error { return m }

// FindRolesRequestValidationError is the validation error returned by
// FindRolesRequest.Validate if the designated constraints aren't met.
type FindRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRolesRequestValidationError) ErrorName() string { return "FindRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRolesRequestValidationError{}

// Validate checks the field values on FindRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRolesResponseMultiError, or nil if none found.
func (m *FindRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindRolesResponseMultiError(errors)
	}

	return nil
}

// FindRolesResponseMultiError is an error wrapping multiple validation errors
// returned by FindRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type FindRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRolesResponseMultiError) AllErrors() []error { return m }

// FindRolesResponseValidationError is the validation error returned by
// FindRolesResponse.Validate if the designated constraints aren't met.
type FindRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRolesResponseValidationError) ErrorName() string {
	return "FindRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRolesResponseValidationError{}
