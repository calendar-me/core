// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/v1/business.proto

package businessv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Business with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Business) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Business with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessMultiError, or nil
// if none found.
func (m *Business) ValidateAll() error {
	return m.validate(true)
}

func (m *Business) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Active

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessMultiError(errors)
	}

	return nil
}

// BusinessMultiError is an error wrapping multiple validation errors returned
// by Business.ValidateAll() if the designated constraints aren't met.
type BusinessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessMultiError) AllErrors() []error { return m }

// BusinessValidationError is the validation error returned by
// Business.Validate if the designated constraints aren't met.
type BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidationError) ErrorName() string { return "BusinessValidationError" }

// Error satisfies the builtin error interface
func (e BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusiness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidationError{}

// Validate checks the field values on GetBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessesRequestMultiError, or nil if none found.
func (m *GetBusinessesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBusinessesRequestMultiError(errors)
	}

	return nil
}

// GetBusinessesRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessesRequestMultiError) AllErrors() []error { return m }

// GetBusinessesRequestValidationError is the validation error returned by
// GetBusinessesRequest.Validate if the designated constraints aren't met.
type GetBusinessesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessesRequestValidationError) ErrorName() string {
	return "GetBusinessesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessesRequestValidationError{}

// Validate checks the field values on GetBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessesResponseMultiError, or nil if none found.
func (m *GetBusinessesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBusinesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBusinessesResponseValidationError{
						field:  fmt.Sprintf("Businesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBusinessesResponseValidationError{
						field:  fmt.Sprintf("Businesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBusinessesResponseValidationError{
					field:  fmt.Sprintf("Businesses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBusinessesResponseMultiError(errors)
	}

	return nil
}

// GetBusinessesResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessesResponseMultiError) AllErrors() []error { return m }

// GetBusinessesResponseValidationError is the validation error returned by
// GetBusinessesResponse.Validate if the designated constraints aren't met.
type GetBusinessesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessesResponseValidationError) ErrorName() string {
	return "GetBusinessesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessesResponseValidationError{}

// Validate checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessRequestMultiError, or nil if none found.
func (m *GetBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBusinessRequestMultiError(errors)
	}

	return nil
}

// GetBusinessRequestMultiError is an error wrapping multiple validation errors
// returned by GetBusinessRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessRequestMultiError) AllErrors() []error { return m }

// GetBusinessRequestValidationError is the validation error returned by
// GetBusinessRequest.Validate if the designated constraints aren't met.
type GetBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessRequestValidationError) ErrorName() string {
	return "GetBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessRequestValidationError{}

// Validate checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessResponseMultiError, or nil if none found.
func (m *GetBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessResponseValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessResponseMultiError(errors)
	}

	return nil
}

// GetBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessResponseMultiError) AllErrors() []error { return m }

// GetBusinessResponseValidationError is the validation error returned by
// GetBusinessResponse.Validate if the designated constraints aren't met.
type GetBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessResponseValidationError) ErrorName() string {
	return "GetBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessResponseValidationError{}

// Validate checks the field values on RegisterBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterBusinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterBusinessRequestMultiError, or nil if none found.
func (m *RegisterBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterBusinessRequestValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterBusinessRequestValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterBusinessRequestMultiError(errors)
	}

	return nil
}

// RegisterBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterBusinessRequestMultiError) AllErrors() []error { return m }

// RegisterBusinessRequestValidationError is the validation error returned by
// RegisterBusinessRequest.Validate if the designated constraints aren't met.
type RegisterBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterBusinessRequestValidationError) ErrorName() string {
	return "RegisterBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterBusinessRequestValidationError{}

// Validate checks the field values on RegisterBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterBusinessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterBusinessResponseMultiError, or nil if none found.
func (m *RegisterBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusiness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterBusinessResponseValidationError{
					field:  "Business",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusiness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterBusinessResponseValidationError{
				field:  "Business",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterBusinessResponseMultiError(errors)
	}

	return nil
}

// RegisterBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterBusinessResponseMultiError) AllErrors() []error { return m }

// RegisterBusinessResponseValidationError is the validation error returned by
// RegisterBusinessResponse.Validate if the designated constraints aren't met.
type RegisterBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterBusinessResponseValidationError) ErrorName() string {
	return "RegisterBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterBusinessResponseValidationError{}

// Validate checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessRequestMultiError, or nil if none found.
func (m *DeleteBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBusinessRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessRequestValidationError is the validation error returned by
// DeleteBusinessRequest.Validate if the designated constraints aren't met.
type DeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessRequestValidationError) ErrorName() string {
	return "DeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessRequestValidationError{}

// Validate checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesRequestMultiError, or nil if none found.
func (m *GetServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServicesRequestMultiError(errors)
	}

	return nil
}

// GetServicesRequestMultiError is an error wrapping multiple validation errors
// returned by GetServicesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesRequestMultiError) AllErrors() []error { return m }

// GetServicesRequestValidationError is the validation error returned by
// GetServicesRequest.Validate if the designated constraints aren't met.
type GetServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesRequestValidationError) ErrorName() string {
	return "GetServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesRequestValidationError{}

// Validate checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesResponseMultiError, or nil if none found.
func (m *GetServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServicesResponseMultiError(errors)
	}

	return nil
}

// GetServicesResponseMultiError is an error wrapping multiple validation
// errors returned by GetServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesResponseMultiError) AllErrors() []error { return m }

// GetServicesResponseValidationError is the validation error returned by
// GetServicesResponse.Validate if the designated constraints aren't met.
type GetServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesResponseValidationError) ErrorName() string {
	return "GetServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesResponseValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceResponseMultiError, or nil if none found.
func (m *GetServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceResponseMultiError(errors)
	}

	return nil
}

// GetServiceResponseMultiError is an error wrapping multiple validation errors
// returned by GetServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceResponseMultiError) AllErrors() []error { return m }

// GetServiceResponseValidationError is the validation error returned by
// GetServiceResponse.Validate if the designated constraints aren't met.
type GetServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceResponseValidationError) ErrorName() string {
	return "GetServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceResponseValidationError{}

// Validate checks the field values on RegisterServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterServiceRequestMultiError, or nil if none found.
func (m *RegisterServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterServiceRequestValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterServiceRequestMultiError(errors)
	}

	return nil
}

// RegisterServiceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceRequestMultiError) AllErrors() []error { return m }

// RegisterServiceRequestValidationError is the validation error returned by
// RegisterServiceRequest.Validate if the designated constraints aren't met.
type RegisterServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceRequestValidationError) ErrorName() string {
	return "RegisterServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceRequestValidationError{}

// Validate checks the field values on RegisterServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterServiceResponseMultiError, or nil if none found.
func (m *RegisterServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterServiceResponseMultiError(errors)
	}

	return nil
}

// RegisterServiceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterServiceResponseMultiError) AllErrors() []error { return m }

// RegisterServiceResponseValidationError is the validation error returned by
// RegisterServiceResponse.Validate if the designated constraints aren't met.
type RegisterServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterServiceResponseValidationError) ErrorName() string {
	return "RegisterServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterServiceResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceRequestMultiError, or nil if none found.
func (m *DeleteServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteServiceRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceRequestMultiError) AllErrors() []error { return m }

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on GetAvailabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailabilitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailabilitiesRequestMultiError, or nil if none found.
func (m *GetAvailabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAvailabilitiesRequestMultiError(errors)
	}

	return nil
}

// GetAvailabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAvailabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAvailabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailabilitiesRequestMultiError) AllErrors() []error { return m }

// GetAvailabilitiesRequestValidationError is the validation error returned by
// GetAvailabilitiesRequest.Validate if the designated constraints aren't met.
type GetAvailabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailabilitiesRequestValidationError) ErrorName() string {
	return "GetAvailabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailabilitiesRequestValidationError{}

// Validate checks the field values on GetAvailabilitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailabilitiesResponseMultiError, or nil if none found.
func (m *GetAvailabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvailabilitiesResponseValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvailabilitiesResponseValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvailabilitiesResponseValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAvailabilitiesResponseMultiError(errors)
	}

	return nil
}

// GetAvailabilitiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAvailabilitiesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAvailabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailabilitiesResponseMultiError) AllErrors() []error { return m }

// GetAvailabilitiesResponseValidationError is the validation error returned by
// GetAvailabilitiesResponse.Validate if the designated constraints aren't met.
type GetAvailabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailabilitiesResponseValidationError) ErrorName() string {
	return "GetAvailabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailabilitiesResponseValidationError{}

// Validate checks the field values on AddAvailabilitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAvailabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAvailabilitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAvailabilitiesRequestMultiError, or nil if none found.
func (m *AddAvailabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAvailabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddAvailabilitiesRequestValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddAvailabilitiesRequestValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddAvailabilitiesRequestValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddAvailabilitiesRequestMultiError(errors)
	}

	return nil
}

// AddAvailabilitiesRequestMultiError is an error wrapping multiple validation
// errors returned by AddAvailabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAvailabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAvailabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAvailabilitiesRequestMultiError) AllErrors() []error { return m }

// AddAvailabilitiesRequestValidationError is the validation error returned by
// AddAvailabilitiesRequest.Validate if the designated constraints aren't met.
type AddAvailabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAvailabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAvailabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAvailabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAvailabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAvailabilitiesRequestValidationError) ErrorName() string {
	return "AddAvailabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAvailabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAvailabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAvailabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAvailabilitiesRequestValidationError{}

// Validate checks the field values on AddAvailabilitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAvailabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAvailabilitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAvailabilitiesResponseMultiError, or nil if none found.
func (m *AddAvailabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAvailabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAvailabilitiesResponseMultiError(errors)
	}

	return nil
}

// AddAvailabilitiesResponseMultiError is an error wrapping multiple validation
// errors returned by AddAvailabilitiesResponse.ValidateAll() if the
// designated constraints aren't met.
type AddAvailabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAvailabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAvailabilitiesResponseMultiError) AllErrors() []error { return m }

// AddAvailabilitiesResponseValidationError is the validation error returned by
// AddAvailabilitiesResponse.Validate if the designated constraints aren't met.
type AddAvailabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAvailabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAvailabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAvailabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAvailabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAvailabilitiesResponseValidationError) ErrorName() string {
	return "AddAvailabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAvailabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAvailabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAvailabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAvailabilitiesResponseValidationError{}
