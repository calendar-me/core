// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: booking/v1/booking.proto

package bookingv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	businessv1 "github.com/calendar-me/core/domain/business/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = businessv1.Availability_State(0)
)

// Validate checks the field values on GetBookingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingsRequestMultiError, or nil if none found.
func (m *GetBookingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBookingsRequestMultiError(errors)
	}

	return nil
}

// GetBookingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingsRequestMultiError) AllErrors() []error { return m }

// GetBookingsRequestValidationError is the validation error returned by
// GetBookingsRequest.Validate if the designated constraints aren't met.
type GetBookingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingsRequestValidationError) ErrorName() string {
	return "GetBookingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingsRequestValidationError{}

// Validate checks the field values on GetBookingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingsResponseMultiError, or nil if none found.
func (m *GetBookingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBookingsResponseValidationError{
						field:  fmt.Sprintf("Slots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBookingsResponseValidationError{
						field:  fmt.Sprintf("Slots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBookingsResponseValidationError{
					field:  fmt.Sprintf("Slots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBookingsResponseMultiError(errors)
	}

	return nil
}

// GetBookingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingsResponseMultiError) AllErrors() []error { return m }

// GetBookingsResponseValidationError is the validation error returned by
// GetBookingsResponse.Validate if the designated constraints aren't met.
type GetBookingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingsResponseValidationError) ErrorName() string {
	return "GetBookingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingsResponseValidationError{}

// Validate checks the field values on GetBookingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingRequestMultiError, or nil if none found.
func (m *GetBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBookingRequestMultiError(errors)
	}

	return nil
}

// GetBookingRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingRequestMultiError) AllErrors() []error { return m }

// GetBookingRequestValidationError is the validation error returned by
// GetBookingRequest.Validate if the designated constraints aren't met.
type GetBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingRequestValidationError) ErrorName() string {
	return "GetBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingRequestValidationError{}

// Validate checks the field values on GetBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingResponseMultiError, or nil if none found.
func (m *GetBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSlot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingResponseValidationError{
					field:  "Slot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingResponseValidationError{
					field:  "Slot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingResponseValidationError{
				field:  "Slot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingResponseMultiError(errors)
	}

	return nil
}

// GetBookingResponseMultiError is an error wrapping multiple validation errors
// returned by GetBookingResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingResponseMultiError) AllErrors() []error { return m }

// GetBookingResponseValidationError is the validation error returned by
// GetBookingResponse.Validate if the designated constraints aren't met.
type GetBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingResponseValidationError) ErrorName() string {
	return "GetBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingResponseValidationError{}

// Validate checks the field values on BookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookRequestMultiError, or
// nil if none found.
func (m *BookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookRequestValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookRequestMultiError(errors)
	}

	return nil
}

// BookRequestMultiError is an error wrapping multiple validation errors
// returned by BookRequest.ValidateAll() if the designated constraints aren't met.
type BookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookRequestMultiError) AllErrors() []error { return m }

// BookRequestValidationError is the validation error returned by
// BookRequest.Validate if the designated constraints aren't met.
type BookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookRequestValidationError) ErrorName() string { return "BookRequestValidationError" }

// Error satisfies the builtin error interface
func (e BookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookRequestValidationError{}

// Validate checks the field values on BookResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookResponseMultiError, or
// nil if none found.
func (m *BookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSlot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookResponseValidationError{
					field:  "Slot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookResponseValidationError{
					field:  "Slot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookResponseValidationError{
				field:  "Slot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookResponseMultiError(errors)
	}

	return nil
}

// BookResponseMultiError is an error wrapping multiple validation errors
// returned by BookResponse.ValidateAll() if the designated constraints aren't met.
type BookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookResponseMultiError) AllErrors() []error { return m }

// BookResponseValidationError is the validation error returned by
// BookResponse.Validate if the designated constraints aren't met.
type BookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookResponseValidationError) ErrorName() string { return "BookResponseValidationError" }

// Error satisfies the builtin error interface
func (e BookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookResponseValidationError{}

// Validate checks the field values on UpdateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookingRequestMultiError, or nil if none found.
func (m *UpdateBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateBookingRequestMultiError(errors)
	}

	return nil
}

// UpdateBookingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingRequestMultiError) AllErrors() []error { return m }

// UpdateBookingRequestValidationError is the validation error returned by
// UpdateBookingRequest.Validate if the designated constraints aren't met.
type UpdateBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookingRequestValidationError) ErrorName() string {
	return "UpdateBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingRequestValidationError{}

// Validate checks the field values on GetSlotsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSlotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSlotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSlotsRequestMultiError, or nil if none found.
func (m *GetSlotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSlotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSlotsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSlotsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSlotsRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSlotsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSlotsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSlotsRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSlotsRequestMultiError(errors)
	}

	return nil
}

// GetSlotsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSlotsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSlotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSlotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSlotsRequestMultiError) AllErrors() []error { return m }

// GetSlotsRequestValidationError is the validation error returned by
// GetSlotsRequest.Validate if the designated constraints aren't met.
type GetSlotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSlotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSlotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSlotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSlotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSlotsRequestValidationError) ErrorName() string { return "GetSlotsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSlotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSlotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSlotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSlotsRequestValidationError{}

// Validate checks the field values on GetSlotsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSlotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSlotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSlotsResponseMultiError, or nil if none found.
func (m *GetSlotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSlotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSlotsResponseValidationError{
						field:  fmt.Sprintf("Slots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSlotsResponseValidationError{
						field:  fmt.Sprintf("Slots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSlotsResponseValidationError{
					field:  fmt.Sprintf("Slots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSlotsResponseMultiError(errors)
	}

	return nil
}

// GetSlotsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSlotsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSlotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSlotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSlotsResponseMultiError) AllErrors() []error { return m }

// GetSlotsResponseValidationError is the validation error returned by
// GetSlotsResponse.Validate if the designated constraints aren't met.
type GetSlotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSlotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSlotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSlotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSlotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSlotsResponseValidationError) ErrorName() string { return "GetSlotsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSlotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSlotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSlotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSlotsResponseValidationError{}

// Validate checks the field values on PreviewSlotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewSlotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewSlotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewSlotsRequestMultiError, or nil if none found.
func (m *PreviewSlotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewSlotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewSlotsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewSlotsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewSlotsRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewSlotsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewSlotsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewSlotsRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAvailabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreviewSlotsRequestValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreviewSlotsRequestValidationError{
						field:  fmt.Sprintf("Availabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreviewSlotsRequestValidationError{
					field:  fmt.Sprintf("Availabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PreviewSlotsRequestMultiError(errors)
	}

	return nil
}

// PreviewSlotsRequestMultiError is an error wrapping multiple validation
// errors returned by PreviewSlotsRequest.ValidateAll() if the designated
// constraints aren't met.
type PreviewSlotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewSlotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewSlotsRequestMultiError) AllErrors() []error { return m }

// PreviewSlotsRequestValidationError is the validation error returned by
// PreviewSlotsRequest.Validate if the designated constraints aren't met.
type PreviewSlotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewSlotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewSlotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewSlotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewSlotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewSlotsRequestValidationError) ErrorName() string {
	return "PreviewSlotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewSlotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewSlotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewSlotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewSlotsRequestValidationError{}

// Validate checks the field values on PreviewSlotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewSlotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewSlotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewSlotsResponseMultiError, or nil if none found.
func (m *PreviewSlotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewSlotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreviewSlotsResponseValidationError{
						field:  fmt.Sprintf("Slots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreviewSlotsResponseValidationError{
						field:  fmt.Sprintf("Slots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreviewSlotsResponseValidationError{
					field:  fmt.Sprintf("Slots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PreviewSlotsResponseMultiError(errors)
	}

	return nil
}

// PreviewSlotsResponseMultiError is an error wrapping multiple validation
// errors returned by PreviewSlotsResponse.ValidateAll() if the designated
// constraints aren't met.
type PreviewSlotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewSlotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewSlotsResponseMultiError) AllErrors() []error { return m }

// PreviewSlotsResponseValidationError is the validation error returned by
// PreviewSlotsResponse.Validate if the designated constraints aren't met.
type PreviewSlotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewSlotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewSlotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewSlotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewSlotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewSlotsResponseValidationError) ErrorName() string {
	return "PreviewSlotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewSlotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewSlotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewSlotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewSlotsResponseValidationError{}

// Validate checks the field values on GetTicketsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTicketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketsRequestMultiError, or nil if none found.
func (m *GetTicketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return GetTicketsRequestMultiError(errors)
	}

	return nil
}

// GetTicketsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTicketsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTicketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketsRequestMultiError) AllErrors() []error { return m }

// GetTicketsRequestValidationError is the validation error returned by
// GetTicketsRequest.Validate if the designated constraints aren't met.
type GetTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketsRequestValidationError) ErrorName() string {
	return "GetTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketsRequestValidationError{}

// Validate checks the field values on GetTicketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTicketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketsResponseMultiError, or nil if none found.
func (m *GetTicketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTickets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTicketsResponseValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTicketsResponseValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTicketsResponseValidationError{
					field:  fmt.Sprintf("Tickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTicketsResponseMultiError(errors)
	}

	return nil
}

// GetTicketsResponseMultiError is an error wrapping multiple validation errors
// returned by GetTicketsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTicketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketsResponseMultiError) AllErrors() []error { return m }

// GetTicketsResponseValidationError is the validation error returned by
// GetTicketsResponse.Validate if the designated constraints aren't met.
type GetTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketsResponseValidationError) ErrorName() string {
	return "GetTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketsResponseValidationError{}

// Validate checks the field values on GetTicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketRequestMultiError, or nil if none found.
func (m *GetTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTicketRequestMultiError(errors)
	}

	return nil
}

// GetTicketRequestMultiError is an error wrapping multiple validation errors
// returned by GetTicketRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketRequestMultiError) AllErrors() []error { return m }

// GetTicketRequestValidationError is the validation error returned by
// GetTicketRequest.Validate if the designated constraints aren't met.
type GetTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketRequestValidationError) ErrorName() string { return "GetTicketRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketRequestValidationError{}

// Validate checks the field values on GetTicketResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketResponseMultiError, or nil if none found.
func (m *GetTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTicket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTicketResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTicketResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTicketResponseValidationError{
				field:  "Ticket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTicketResponseMultiError(errors)
	}

	return nil
}

// GetTicketResponseMultiError is an error wrapping multiple validation errors
// returned by GetTicketResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketResponseMultiError) AllErrors() []error { return m }

// GetTicketResponseValidationError is the validation error returned by
// GetTicketResponse.Validate if the designated constraints aren't met.
type GetTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketResponseValidationError) ErrorName() string {
	return "GetTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketResponseValidationError{}

// Validate checks the field values on UpdateTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTicketRequestMultiError, or nil if none found.
func (m *UpdateTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateTicketRequestMultiError(errors)
	}

	return nil
}

// UpdateTicketRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTicketRequestMultiError) AllErrors() []error { return m }

// UpdateTicketRequestValidationError is the validation error returned by
// UpdateTicketRequest.Validate if the designated constraints aren't met.
type UpdateTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTicketRequestValidationError) ErrorName() string {
	return "UpdateTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTicketRequestValidationError{}
